# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import weather_pb2 as weather__pb2


class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.isAccessTokenValid = channel.unary_unary(
            '/weather.AuthService/isAccessTokenValid',
            request_serializer=weather__pb2.TokenRequest.SerializeToString,
            response_deserializer=weather__pb2.TokenValidationResponse.FromString,
        )


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def isAccessTokenValid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'isAccessTokenValid': grpc.unary_unary_rpc_method_handler(
            servicer.isAccessTokenValid,
            request_deserializer=weather__pb2.TokenRequest.FromString,
            response_serializer=weather__pb2.TokenValidationResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'weather.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def isAccessTokenValid(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_unary(request, target, '/weather.AuthService/isAccessTokenValid',
                                             weather__pb2.TokenRequest.SerializeToString,
                                             weather__pb2.TokenValidationResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
